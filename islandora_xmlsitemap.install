<?php

/**
 * @file
 * This file contains all install related hooks.
 */

/**
 * Implements hook_uninstall().
 */
function islandora_xmlsitemap_uninstall() {
  $variables = array(
    'islandora_xmlsitemap_number_of_pids_to_process',
    'islandora_xmlsitemap_last_modified_value',
    'islandora_xmlsitemap_last_modified_field',
  );
  array_walk($variables, 'variable_del');
}

/**
 * Implements hook_install().
 */
function islandora_xmlsitemap_install() {
  // XXX: Taking advantage of the update hook's batch functionality to run the
  // same batch on install as one would have to in the update hook.
  islandora_xmlsitemap_update_7000();
}

/**
 * Implements hook_schema().
 */
function islandora_xmlsitemap_schema() {
  return array(
    // This table satisfies a race condition where we cannot guarantee unique
    // IDs in the xmlsitemap table when ingesting concurrently, so we generate
    // them here instead. See https://jira.duraspace.org/browse/ISLANDORA-1784
    // for more details.
    'islandora_xmlsitemap_entry_ids' => array(
      'description' => 'Autoincrementing table to store IDs we can use for xmlsitemap table entries.',
      'fields' => array(
        'id' => array(
          'description' => 'Current ID number',
          'type' => 'serial',
          'not null' => TRUE,
        ),
        'pid' => array(
          'description' => 'The PID relating to this ID.',
          'type' => 'varchar',
          'length' => 64,
        ),
      ),
      'primary key' => array('id'),
      'unique keys' => array('pid' => array('pid')),
    ),
  );
}

/**
 * Add the ID table schema in, and set the initial ID.
 */
function islandora_xmlsitemap_update_7000(&$sandbox = array()) {
  module_load_include('inc', 'islandora_xmlsitemap', 'includes/db');
  if (!isset($sandbox['target'])) {
    // Create our table, if it doesn't exist.
    if (!db_table_exists('islandora_xmlsitemap_entry_ids')) {
      $schema = islandora_xmlsitemap_schema();
      db_create_table('islandora_xmlsitemap_entry_ids', $schema['islandora_xmlsitemap_entry_ids']);
    }
    // Set an initial value.
    islandora_xmlsitemap_insert_increment_record(NULL);
    // And immediately give it the boot.
    islandora_xmlsitemap_delete_increment_record(NULL);
    // Get the current max.
    $q = db_select('xmlsitemap', 'x');
    $q->addExpression('MAX(id)');
    $q->condition('type', 'custom', '=');
    $current_id = $q->execute()->fetchField();
    $sandbox['target'] = $current_id !== FALSE ? $current_id : 1;
    $sandbox['current'] = 0;
  }

  // XXX: there are a few conditions where the ID for this table can't simply
  // start at 1, so we iterate the auto-incrementing ID field in batch to the
  // point where it's supposed to be. It's a little bit goofy to do it this way,
  // but databases handle auto-increment fields differently, so the method to
  // set it needs to be database-agnostic.
  foreach (array_fill(0, min(1000, $sandbox['target'] - $sandbox['current']), NULL) as $increment) {
    islandora_xmlsitemap_insert_increment_record($increment);
    islandora_xmlsitemap_delete_increment_record($increment);
    $sandbox['current']++;
  }

  // Are we done?
  $context['#finished'] = $sandbox['current'] / $sandbox['target'];
}
